<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: firewall | Learn-a-holic Geek Notes]]></title>
  <link href="http://learnaholic.me/categories/firewall/atom.xml" rel="self"/>
  <link href="http://learnaholic.me/"/>
  <updated>2014-01-09T14:31:58+01:00</updated>
  <id>http://learnaholic.me/</id>
  <author>
    <name><![CDATA[Kornelije Sajler]]></name>
    <email><![CDATA[xajler@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubunt VPS Configuration Step-By-Step Notes]]></title>
    <link href="http://learnaholic.me/2014/01/09/ubunt-vps-install-step-by-step-notes/"/>
    <updated>2014-01-09T14:30:00+01:00</updated>
    <id>http://learnaholic.me/2014/01/09/ubunt-vps-install-step-by-step-notes</id>
    <content type="html"><![CDATA[<p>These are notes and step-by-step tutorial to configure <em>Ubuntu VPS</em> with installation of <em>nginx</em>, <em>node.js</em>, <em>ruby</em>, <em>PostgreSQL</em>, ...<br/>
It should work for <em>Ubuntu</em> 12 and 13 versions, maybe even older.<br/>
It assumes knowledge of <em>SSH</em> and connecting to your fresh VPS install.<br/>
Throughout the install process for editing I'm using <em>vi</em>, you can use what ever makes you happy: <em>emacs</em>, <em>nano</em>, ...</p>

<p>Those are just my notes, if someone has something better or can improve it please do comment!</p>

<h2>Security</h2>

<h3>Update and installing essential software</h3>

<p><code>bash
sudo apt-get -y update
sudo apt-get -y install curl git-core python-software-properties software-properties-common
</code></p>

<h3>User - Admin Group &amp; SSH</h3>

<p><code>bash
sudo groupadd admin
sudo adduser &lt;USERNAME&gt;
sudo usermod -a -G admin &lt;USERNAME&gt;
sudo dpkg-statoverride --update --add root admin 4750 /bin/su
</code></p>

<p>Test new user and test that has <code>sudo</code> privileges:</p>

<p><code>bash
su &lt;USERNAME&gt;
</code></p>

<p>Use this new user from now on.</p>

<p>Securing SSH:</p>

<p><code>bash
sudo vi /etc/ssh/sshd_config
</code></p>

<p>Make these changes:</p>

<ul>
<li>Port <DESIRED PORT NUMBER> (Don't use default 22)</li>
<li>PermitRootLogin no</li>
<li>X11Forwarding no</li>
</ul>


<p>If your SSH is very slow setting <code>X11Forwarding</code> to <code>no</code> can really help in this case!</p>

<p><code>bash  
sudo /etc/init.d/ssh restart
</code></p>

<p>Connecting to VPS SSH:</p>

<p><code>bash
ssh &lt;USERNAME&gt;@&lt;VPS_DOMAIN_OR_IP&gt; -p &lt;PORT&gt;
</code></p>

<h3>Locale problem</h3>

<p>Very annoying error in apt: <em>locale: Cannot set LC_CTYPE</em></p>

<p><code>bash
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
sudo locale-gen en_US.UTF-8
sudo dpkg-reconfigure locales
sudo update-locale en_US.UTF-8
</code>
If you get error <code>-bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)</code> runnig this,
I found out that logging out from SSH and again connecting agian will not longer show the error:</p>

<p><code>bash
export LC_ALL=en_US.UTF-8
</code></p>

<h3>Firewall</h3>

<p>Before installing <em>ufw</em> firewall, to make <code>ping</code> and <code>apt-get</code> working, add the following into <em>iptables</em>, as <em>ufw</em> just interfaces with it.</p>

<p><code>bash
sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
</code></p>

<p><code>bash
sudo apt-get -y install ufw
sudo vi /etc/default/ufw
</code></p>

<p>Make this change:</p>

<pre><code>IPV6=no
</code></pre>

<p><code>bash
sudo ufw allow &lt;PORT_NUMBER_CHANGED_TO_SSH&gt;
sudo ufw allow out http
sudo ufw allow out 53
sudo ufw logging on
</code></p>

<p>Be sure that you allowed the port for SSH because otherwise, you'll be unable to get into VPS!!!</p>

<p><code>bash
sudo ufw enable
</code></p>

<p>If you get bunch of errors while enabling <em>ufw</em> firewall, just ignore it?!</p>

<p>Check the Firewall status with:</p>

<p><code>bash
sudo ufw status verbose
</code></p>

<h3>Get Ubuntu Version Info</h3>

<p>If the <em>Ubuntu</em> version info is needed, and what codename the current <em>Ubuntu</em> is use this command:</p>

<p>```bash
lsb_release -a</p>

<p>No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 13.04
Release:    13.04
Codename:   raring
```</p>

<h3>sysctl</h3>

<p><code>bash
sudo mv /etc/sysctl.conf /etc/sysctl.conf.orig
sudo vi /etc/sysctl.conf
</code></p>

<p>Add this to a <code>sysctl.conf</code>:</p>

<p>```</p>

<h1>IP Spoofing protection</h1>

<p>net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1</p>

<h1>Ignore ICMP broadcast requests</h1>

<p>net.ipv4.icmp_echo_ignore_broadcasts = 1</p>

<h1>Disable source packet routing</h1>

<p>net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0</p>

<h1>Ignore send redirects</h1>

<p>net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0</p>

<h1>Block SYN attacks</h1>

<p>net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 2048
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5</p>

<h1>Log Martians</h1>

<p>net.ipv4.conf.all.log_martians = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1</p>

<h1>Ignore ICMP redirects</h1>

<p>net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0</p>

<h1>Ignore Directed pings</h1>

<p>net.ipv4.icmp_echo_ignore_all = 1
```</p>

<p><code>bash
sudo sysctl -p
</code></p>

<h3>Denyhost</h3>

<p><code>bash
sudo apt-get -y install denyhosts
</code></p>

<h3>Remove Samba File Sharing</h3>

<p>If for some reason you have completely unnecessary Samba installed by default on VPS you can remove it with:</p>

<p><code>bash
sudo apt-get -y remove --purge samba
</code></p>

<h3>Remove Bind DNS Server</h3>

<p>Same with Bind, if you don't need it, remove it!</p>

<p><code>bash
sudo apt-get -y remove --purge bind9
sudo rm -rf /var/cache/bind
sudo rm -rf /usr/share/bind9
sudo rm -rf /etc/bind
</code></p>

<h2>SSH Key and GitHub</h2>

<p>Check if ~/.ssh has *.pub files, if not generate the SSH key.</p>

<p><code>bash
ssh-keygen -t rsa -C "&lt;YOUR_EMAIL&gt;"
</code></p>

<ul>
<li>Use default place to store: ~/.ssh.</li>
<li>Do not use passphrase, unless you want to type every time you commit to <em>GitHub</em>.</li>
</ul>


<p><code>bash
cat ~/.ssh/id_rsa.pub
</code></p>

<p>Copy the contents to clipboard.<br/>
Go to <em>GitHub</em> > Account Settings > SSH Keys.<br/>
Hit <code>Add SSH Key</code> give title and in <code>Key</code> paste public key from clipboard.</p>

<p><code>bash
ssh git@github.com
eval `ssh-agent -s`
ssh-add -k
</code></p>

<h2>Software Install</h2>

<p>Pick and choose what software do you need to install!</p>

<h3>Instal nginx</h3>

<p><code>bash
sudo add-apt-repository ppa:nginx/stable
sudo apt-get -y update
sudo apt-get -y install nginx
sudo /etc/init.d/nginx start
</code></p>

<p>If error is <code>nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)</code> then probably <em>Apache</em> might be installed beforehand:</p>

<p><code>bash
sudo apt-get remove apache2-mpm-prefork
sudo apt-get remove apache2-mpm-worker
sudo apt-get remove apache2
sudo dpkg --purge apache2.2-common
sudo /etc/init.d/nginx start
</code></p>

<p>If something is wrong look for nginx logs:</p>

<p><code>bash
vi /var/log/nginx/error.log
</code></p>

<h3>Install node.js</h3>

<p><code>bash
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get -y update
sudo apt-get install -y nodejs
</code></p>

<h3>Install and Configure redis</h3>

<p><code>bash
sudo apt-get -y install redis-server
sudo cp /etc/redis/redis.conf /etc/redis/redis.conf.default
</code></p>

<p>Pidfile: /var/run/redis-server.pid
Logfile: /var/log/redis-server.log</p>

<h3>Install and configure PostgreSQL, create db and db user</h3>

<p><code>bash
sudo add-apt-repository ppa:pitti/postgresql
sudo apt-get -y update
sudo apt-get install -y postgresql libpq-dev
</code></p>

<p>Log into <code>postgres</code> change main password, create db user with password and create new database with previously created user as owner:</p>

<p><code>
sudo -u postgres psql
\password  "&lt;PASSWORD&gt;"
create user &lt;USERNAME&gt; with password '&lt;USER_PASSWORD&gt;';
create database &lt;DB_NAME&gt; owner &lt;USERNAME&gt;;
\q
</code></p>

<h3>Install Ruby with rbenv and rbenv-installer</h3>

<p><code>bash
cd
curl https://raw.github.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash
vi .bashrc
</code></p>

<p>At top add:</p>

<p>```bash
export RBENV_ROOT="${HOME}/.rbenv"</p>

<p>if [ -d "${RBENV_ROOT}" ]; then
  export PATH="${RBENV_ROOT}/bin:${PATH}"
  eval "$(rbenv init -)"
fi
<code>``
Reset</code>.bashrc`</p>

<p><code>bash
. ~/.bashrc
</code></p>

<p>Note that <code>bootstrap-ubuntu-12-04</code> works fine for Ubuntu 13.</p>

<p><code>bash
rbenv bootstrap-ubuntu-12-04
</code></p>

<p>Firstly list <em>rbenv</em> available <em>Ruby</em> versions and pick one to install:</p>

<p><code>bash
rbenv install -l
rbenv install 2.1.0
</code></p>

<p>Set chosen <em>Ruby</em> version to be global, and test it:</p>

<p><code>
rbenv global 2.1.0
ruby -v
</code></p>

<p>You should ge something like: <code>ruby 2.1.0p0 (2013-12-25 revision 44422) [x86_64-linux]</code>.</p>

<p>Install bundler then <code>rehash</code> the <em>rbenv</em> and thest the <code>bundle</code> version:</p>

<p><code>bash
gem install bundler --no-ri --no-rdoc
rbenv rehash
bundle -v
</code></p>

<h3>Install Ã˜MQ (ZeroMQ)</h3>

<p><code>bash
sudo apt-get install -y uuid uuid-dev uuid-runtime
sudo add-apt-repository ppa:chris-lea/zeromq
sudo add-apt-repository ppa:chris-lea/libpgm (there is no "quantal" repository so change repository source to "precise")
sudo apt-get -y update
sudo apt-get -y install libzmq-dbg libzmq-dev libzmq1
</code></p>

<h3>Install erlang</h3>

<p><code>
sudo apt-get -y install erlang-nox
</code></p>

<h3>Install and Configure riak</h3>

<p><code>bash
curl http://apt.basho.com/gpg/basho.apt.key | sudo apt-key add -
</code></p>

<p>If <em>Ubuntu</em> is not LTS instead of <code>lsb_release -sc</code> use <em>Ubuntu</em> codename of previous LTS, e.g. Ubuntu 13.04 (Raring) is not LTS use 12.04 codename <code>precise</code> instead.</p>

<p>Here is the list of <a href="https://wiki.ubuntu.com/DevelopmentCodeNames">Ubuntu codenames</a>.</p>

<p>For LTS:</p>

<p><code>bash
sudo bash -c "echo deb http://apt.basho.com $(lsb_release -sc) main &gt; /etc/apt/sources.list.d/basho.list"
</code></p>

<p>For non LTS, in this case Ubuntu 13.04 use Ubuntu 12.10 codename <code>precise</code>:</p>

<p><code>bash
sudo bash -c "echo deb http://apt.basho.com precise  main &gt; /etc/apt/sources.list.d/basho.list"
</code></p>

<p>Now finally install <em>riak</em>:</p>

<p><code>bash
sudo apt-get -y update
sudo apt-get -y install riak --force-yes
</code></p>

<h4>Change PAM Based Limits for riak</h4>

<p><code>bash
sudo vi /etc/pam.d/common-session
</code></p>

<p>Add at the end:</p>

<p><code>
session required    pam_limits.so
</code></p>

<p><code>bash
sudo vi /etc/security/limits.conf
</code></p>

<p>Add this to the <code>limits.conf</code>:</p>

<p><code>
*               soft     nofile          65536
*               hard     nofile          65536
</code></p>

<p>If accessing riak nodes via SSH:</p>

<p><code>bash
sudo vi /etc/ssh/sshd_config
</code>
Change <code>UseLogin</code> to  <code>yes</code> and reboot machine!</p>

<p>Test that limit of open files is <code>65536</code> with:</p>

<p><code>bash
ulimit -n
 65536
</code></p>

<p>Hope it helps, please give feedback and comments with any missing/wrong parts to this Ubunt VPS install!</p>
]]></content>
  </entry>
  
</feed>
