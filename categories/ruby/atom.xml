<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Learn-a-holic Geek Notes]]></title>
  <link href="http://learnaholic.me/categories/ruby/atom.xml" rel="self"/>
  <link href="http://learnaholic.me/"/>
  <updated>2012-10-24T05:05:25+02:00</updated>
  <id>http://learnaholic.me/</id>
  <author>
    <name><![CDATA[Kornelije Sajler]]></name>
    <email><![CDATA[xajler@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails App from Scratch: User Sign Up page]]></title>
    <link href="http://learnaholic.me/2012/10/24/rails-app-from-scratch-user-signup-page/"/>
    <updated>2012-10-24T05:25:00+02:00</updated>
    <id>http://learnaholic.me/2012/10/24/rails-app-from-scratch-user-signup-page</id>
    <content type="html"><![CDATA[<p>The aim of post is to create only the User Sign Up Page through TDD cycle of creating User
Resource, Controller, Model and View.</p>

<p>The <code>User</code> Model will be very simple having only:</p>

<ul>
<li><em>Email</em> - required, update is disabled once it is created.</li>
<li><em>Password</em> - required, should be greater or equal than 8 characters.</li>
<li><em>Full Name</em> - required, just for human readable displaying of the user name instead of email.</li>
</ul>


<blockquote><p>Note:</p>

<p>The first intention of this blog post was full User authentication, but since it uses
TDD step-by-step development, and there is a lot from creating Route, Controller, Model and View
this post will be only creating Sign Up page. Second and maybe third post will have
validation, saving, authenticating and updating user!</p></blockquote>

<h2>Generate User Integration Test</h2>

<p>First we will start with generating Rails <code>integration_test</code> residing in <code>spec/resuorces</code> folder:</p>

<p>```bash
$ rails g integration_test users</p>

<pre><code>  invoke  rspec
  create    spec/requests/users_spec.rb
</code></pre>

<p>```</p>

<p>First we will remove a <code>GET /users</code> as <code>describe</code> block generated by default in <code>spec/requests/users_spec.rb</code>
and left simple as:</p>

<p>```ruby spec/requests/users_sepec.rb
require 'spec_helper'</p>

<p>describe 'Users' do
end
```</p>

<h2>Create User Test</h2>

<p>In the <code>users_spec.rb</code> we will add a <code>context</code> block that will call the <code>new</code> route and
expect to have fields for <code>email</code>, <code>password</code>, <code>password_confirmation</code>, <code>full_name</code> and button <code>Sign Up</code>:</p>

<p>```ruby spec/requests/users_sepec.rb
require 'spec_helper'</p>

<p>describe 'Users' do
  context 'GET /users/new' do</p>

<pre><code>it 'displays the create new user page' do
  visit new_user_path

  page.should have_content 'Email'
  page.should have_content 'Full Name'
  page.should have_content 'Password'
  page.should have_content 'Confirm Password'
  page.has_field? 'email'
  page.has_field? 'full_name'
  page.has_field? 'password'
  page.has_field? 'password_confirmation'
  page.has_button? 'Sign Up'
end
</code></pre>

<p>  end
end
```
There are quite few asserts in this test, that is certainly not good practice in testing,
but to make this post shorter, it is like this!</p>

<h2>TDD Step 1: Routing (Resource)</h2>

<p>After running <em>RSpec</em> test or viewing from <code>Guard</code> the expected error on saving file should be:</p>

<p>```text
1) Users GET /users/new displays the create new user page
   Failure/Error: visit new_user_path
   NameError:</p>

<pre><code> undefined local variable or method `new_user_path' for #&lt;RSpec::Core::ExampleGroup::Nested_1::Nested_1:0x007fcf4a5a30b8&gt;
</code></pre>

<p>   # ./spec/requests/users_spec.rb:6:in `block (3 levels) in <top (required)>'
```</p>

<p>The problem is that there is no users route created.
Open <code>config/routes.rb</code>, remove all commented code and add <code>users</code> resource:</p>

<p><code>ruby config/routes.rb
JustToDoIt::Application.routes.draw do
  resources :users
end
</code></p>

<p>After run command to examine <em>Rails</em> routes:</p>

<p>```bash
$ rake routes</p>

<pre><code>users GET    /users(.:format)          users#index
      POST   /users(.:format)          users#create
</code></pre>

<p> new_user GET    /users/new(.:format)      users#new
edit_user GET    /users/:id/edit(.:format) users#edit</p>

<pre><code> user GET    /users/:id(.:format)      users#show
      PUT    /users/:id(.:format)      users#update
      DELETE /users/:id(.:format)      users#destroy
</code></pre>

<p>```</p>

<p>You will see the <code>new_user</code> path, but to actually get the path it is needed to be called
with <code>_path</code> added to the route name as we called it in first test <code>visit new_user_path</code>.</p>

<p>For this simple authentication we will only need creating and updating of user account,
but in future, we may need, a full administration of users, including listing all and destroy
them as well!</p>

<h3>Guard Routing Error</h3>

<p>If there is a <code>LoadError</code> after applying the route in <em>Guard</em> terminal:</p>

<p><code>
Exception encountered: #&lt;LoadError: cannot load such file -- /Users/xajler/src/rb/just-todo-it/spec/routing&gt;
</code></p>

<p>Create a <code>spec/routing</code> folder, to fix the issue:</p>

<p><code>bash
$ mkdir spec/routing
</code></p>

<p>After applying the user route (and <em>Guard</em> fix), there is a expected message complaining
for existence of users controller.</p>

<h2>TDD Step 2: Controller</h2>

<p>To make test green, we need to create a user controller and the action or method called <code>new</code>
in the <code>app/controllors/users_controller.rb</code>:</p>

<p>```ruby app/controllers/users_controller.rb
class UsersController &lt; ApplicationController
  def new</p>

<pre><code>@user = User.new
</code></pre>

<p>  end
end
```</p>

<p>We are creating a new <code>User</code> and setting it to a instance variable <code>@user</code>, so it will be
visible within the View page!</p>

<p>The RSpec test will be failing since it doesn't know what the <code>User</code> is:</p>

<p>```
1) Users GET /users/new displays the create new user page
   Failure/Error: visit new_user_path
   NameError:</p>

<pre><code> uninitialized constant UsersController::User
</code></pre>

<p>```</p>

<h2>TDD Step 3: Model</h2>

<p>To make test green, we need to create a <code>User</code> model in <code>app/models</code> and it will have
<code>email</code>, <code>passmord_digest</code> and <code>full_name</code>.</p>

<p>Having a <code>password_digest</code> field is important as it's the default name that's used with Rails
<code>has_secure_password</code> feature and we'll be using this feature later.</p>

<p>Use this command to generate User:</p>

<p>```bash
$ rails g model User email password_digest full_name</p>

<pre><code>  invoke  active_record
  create    db/migrate/20121023234400_create_users.rb
  create    app/models/user.rb
  invoke    rspec
  create      spec/models/user_spec.rb
  invoke      factory_girl
  create        spec/factories/users.rb
</code></pre>

<p>```</p>

<p>Change the generate <code>attr_accessible</code> to include  <code>email</code>, <code>password</code>, <code>password_confirmation</code>
and <code>full_name</code> needed for user create and edit form:</p>

<p>```ruby app/models/user.rb
class User &lt; ActiveRecord::Base
  has_secure_password</p>

<p>  attr_accessible :email, :password, :password_confirmation, :full_name
end
```</p>

<p>We also added <code>has_secure_password</code> to the User model. This was introduced in Rails 3.1
and adds some simple authentication support to the model using that <code>password_digest</code> column.</p>

<blockquote><p>Note:</p>

<p>To have this <code>bcrypt-ruby</code> gem must be in <code>Gemfile</code> (we included it in first post)
as this gem handles hashing the password before its stored in the database.</p></blockquote>

<p>The generator will create a Model, Migration, RSpec test and
a Factory Girl factory since we use it instead default Rails fixtures!</p>

<p>We will have another error regarding database:</p>

<p>```
1) Users GET /users/new displays the create new user page
   Failure/Error: visit new_user_path
   ActiveRecord::StatementInvalid:</p>

<pre><code> Could not find table 'users'
</code></pre>

<p>```</p>

<h3>Migration</h3>

<p>To have a database and make green our test, run command:</p>

<p><code>bash
$ rake db:migrate
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&gt; 0.0025s
==  CreateUsers: migrated (0.0027s) ===========================================
</code></p>

<blockquote><p>Note:</p>

<p>This migration will create <code>development.sqlite3</code> <em>SQLite 3</em> database in <code>db</code> folder and <code>users</code> table.</p></blockquote>

<p>We also need to prepare database for testing with:</p>

<p><code>bash
$ rake db:test:prepare
</code></p>

<blockquote><p>Note:</p>

<p>This migration will create <code>test.sqlite3</code> <em>SQLite 3</em> database in <code>db</code> folder, and <code>users</code> table.</p></blockquote>

<p>The RSpec test still will be failing with complaint on not having a view for user:</p>

<p>```
1) Users GET /users/new displays the create new user page
   Failure/Error: visit new_user_path
   ActionView::MissingTemplate:</p>

<pre><code> Missing template users/new, application/new with {:locale=&gt;[:en], :formats=&gt;[:html], :handlers=&gt;[:erb, :builder, :coffee, :haml]}. Searched in:
   * "/Users/xajler/src/rb/just-todo-it/app/views"
</code></pre>

<p>```</p>

<h2>TDD Step 4: View</h2>

<p>As we noted in first tutorial, instead of default <em>Template View Engine</em> <code>erb</code>, we will use
far more better <code>haml</code> View Engine.</p>

<h3>Converting the erb layout to haml</h3>

<p>But before using the <code>haml</code> View Engine we need to convert default layout generated with
application:</p>

<p>```erb app/views/layouts/application.html.erb
&lt;!DOCTYPE html>
<html>
<head>
  <title>JustToDoIt</title>
  &lt;%= stylesheet_link_tag    "application", :media => "all" %>
  &lt;%= javascript_include_tag "application" %>
  &lt;%= csrf_meta_tags %>
</head>
<body></p>

<p>&lt;%= yield %></p>

<p></body>
</html>
```</p>

<p>to much more readable <code>haml</code> default layout for application:</p>

<p>```haml app/views/layouts/application.html.haml
!!! 5
%html
%head
  %title JustToDoIt
  = stylesheet_link_tag    'application', media: 'all'
  = javascript_include_tag 'application'
  = csrf_meta_tags</p>

<p>%body
  = yield
```</p>

<h3>New User View page</h3>

<p>We need to create a view for user called <code>new</code>, and it needs to have a fields for <code>email</code>,
<code>full_name</code>, <code>password</code>, <code>confirm password</code> and <code>Sign Up</code> button.</p>

<p>Create a <code>app/views/users/new.html.haml</code>:</p>

<p>```haml app/views/users/new.html.haml
%h1 Sign Up</p>

<p>= render partial: 'form'
```</p>

<h3>User Form Partial</h3>

<p>Since the creating and updating User form will be identical, we shall create a <code>partial</code> to reuse
user form on create and update views:</p>

<p>```haml app/views/users/_form.html.haml
= form_for @user do |f|
  - if @user.errors.any?</p>

<pre><code>%div.error_messages
  %h2 Form is invalid
  %ul
    - @user.errors.full_messages.each do |message|
      %li= message
</code></pre>

<p>  = f.label :email, 'Email:'
  = f.text_field :email
  %br</p>

<p>  = f.label :password, 'Password:'
  = f.text_field :password
  %br</p>

<p>  = f.label :password_confirmation, 'Confirm Password:'
  = f.text_field :password_confirmation
  %br</p>

<p>  = f.label :full_name, 'Full Name:'
  = f.text_field :full_name
  %br</p>

<p>  = f.submit 'Sign Up'
```</p>

<p>And finally the test will be green, ignore for now that <code>spec/models/user_spec.rb</code> is currently pending!</p>

<h2>Testing Sign Up Page with Browser</h2>

<p>The beauty of it all, is that we didn't even start browser, so we can do it now for test by running
Rails server (<em>Thin</em>):</p>

<p>```bash
$ rails s
=> Booting Thin
=> Rails 3.2.8 application starting in development on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server</p>

<blockquote><blockquote><p>Thin web server (v1.5.0 codename Knife)
Maximum connections set to 1024
Listening on 0.0.0.0:3000, CTRL+C to stop
```</p></blockquote></blockquote>

<p>Open page:</p>

<pre><code>http://localhost:3000/users/new
</code></pre>

<p>The design it is not really attractive at all, but it was not scope of the post, and should
not be while creating application. When designers create full design it can be applied very
easily. Functionality matters for now!</p>

<h2>Creating the SignUp route</h2>

<p>The <code>/users/new</code> route name is descriptive but having just <code>/signup</code>, I think is far more
better route name!</p>

<h3>SignUp Route Test</h3>

<p>Create a new test context in <code>spec/resources/users_spec.rb</code>:</p>

<p>```ruby spec/requests/users_sepec.rb
require 'spec_helper'</p>

<p>describe 'Users' do
  context 'GET /users/new' do</p>

<pre><code>it 'displays the create new user page' do
  visit new_user_path

  page.should have_content 'Email'
  page.should have_content 'Full Name'
  page.should have_content 'Password'
  page.should have_content 'Confirm Password'
  page.has_field? 'email'
  page.has_field? 'full_name'
  page.has_field? 'password'
  page.has_field? 'password_confirmation'
  page.has_button? 'Sign Up'
end
</code></pre>

<p>  end</p>

<p>  context 'GET /signup' do</p>

<pre><code>it 'displays the sign up page' do
  visit signup_path

  page.should have_content 'Email'
  page.should have_content 'Full Name'
  page.should have_content 'Password'
  page.should have_content 'Confirm Password'
  page.has_field? 'email'
  page.has_field? 'full_name'
  page.has_field? 'password'
  page.has_field? 'password_confirmation'
  page.has_button? 'Sign Up'
end
</code></pre>

<p>  end
end
```</p>

<p>The <code>GET /signup</code> context is added that is now visiting the <code>signup_path</code>!</p>

<p>Test fails:</p>

<p>```
1) Users GET /signup displays the sign up page
   Failure/Error: visit signup_path
   NameError:</p>

<pre><code> undefined local variable or method `signup_path' for #&lt;RSpec::Core::ExampleGroup::Nested_1::Nested_2:0x007f9f8b6459d8&gt;
</code></pre>

<p>```</p>

<p>There is no <code>signup_path</code> so we need to create it in <code>routes</code>:</p>

<p><code>ruby config/routes.rb
JustToDoIt::Application.routes.draw do
  resources :users
  get 'signup', to: 'users#new', as: 'signup'
end
</code></p>

<p>The test passes and it is green, you can now try testing it in browser:</p>

<pre><code>localhost:3000/signup
</code></pre>

<p>It should work just fine!</p>

<h2>Conclusion</h2>

<p>This post intended to absorb whole authentication of user, but currently is just too long
and I will stop here and in second post will introduce validation, saving and maybe yet
in third post authenticating and updating user!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails App from Scratch: Create and Configure for Testing]]></title>
    <link href="http://learnaholic.me/2012/10/19/rails-app-from-scratch-create-and-configure-testing/"/>
    <updated>2012-10-19T06:28:00+02:00</updated>
    <id>http://learnaholic.me/2012/10/19/rails-app-from-scratch-create-and-configure-testing</id>
    <content type="html"><![CDATA[<p>This blog post will be one many showing how to create <em>Todo</em> the <em>Rails 3</em> application.
The first post will be creating the Rails application and setting up the testing environment.</p>

<p> The app will be called <em>Just ToDo it</em>, just as famous
 <a href="https://en.wikipedia.org/wiki/Just_Do_It_(Nike)" target="_blank">Nike slogan</a>. And also Gods of DNS where
 good to me so the <em>Domain</em> <code>justtodoit.com</code> is free so I bought it and the final stage of this
 Rails posts will be deployment to <em>VPS</em> and pointing to the domain <a href="http://justtodoit.com">JustToDoIt</a>
 (Currently displays my domain <a href="http://metaintellect.com">metaintellect</a>).</p>

<h2>Create application</h2>

<p>The command to create new Rails application and omitting default testing framework <em>Unit::Test</em>
with switch <code>-T</code> or longer version is <code>--skip-test-unit</code></p>

<p><code>bash
$ rails new JustToDoIt -T
create
create  README.rdoc
create  Rakefile
create  config.ru
create  .gitignore
create  Gemfile
create  app
...
</code></p>

<p>I had capitalized <code>JustToDoIt</code> before, because the name is used as Ruby class and Pascal case is convention
for Ruby classes.</p>

<p>Then rename folder to <code>just-todo-it</code> to be more in *nix folder naming convention:</p>

<p><code>bash
$ mv JustToDoIt just-todo-it
</code></p>

<p>The fun starts when the directory is changed to Rails app directory:</p>

<p><code>bash
$ cd just-todo-it
</code></p>

<h2>Text editor</h2>

<p>I'll use <em>vim</em> as a default text editor, for <em>TextMate</em> use <code>mate</code> and for the <em>Sublime Text 2</em> use
<code>subl</code> terminal commands for editing files instead of <code>vim</code>.</p>

<h2>Gemfile</h2>

<p>First open the <code>Gemfile</code>, we need to add some <em>gems</em> that will be used in the app and also
for testing:</p>

<p><code>bash
$ vim Gemfile
</code>
Edit it to include this gems:</p>

<p>```ruby Gemfile
source 'https://rubygems.org'</p>

<p>gem 'rails'
gem 'bcrypt-ruby'
gem 'unicorn'
gem 'haml'
gem 'thin'
gem 'pg'</p>

<p>group :test, :development do
  gem 'sqlite3'
  gem 'rspec-rails'
  gem 'pry'
  gem 'factory_girl_rails'
  gem 'database_cleaner'
  gem 'awesome_print'
  gem 'capybara'
  gem 'rb-fsevent', :require => false if RUBY_PLATFORM =~ /darwin/i
  gem 'guard-rspec'
  gem 'spork'
  gem 'guard-spork'
end</p>

<p>group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier', '>= 1.0.3'
end</p>

<p>gem 'jquery-rails'
```</p>

<p>After changing the <code>Gemfile</code> run <em>bundler</em> to update and download entered <em>gems</em>:</p>

<p><code>bash
$ bundle install
</code></p>

<h3>Main and Production Ruby Gems</h3>

<ul>
<li><a href="http://rubyonrails.org/">rails</a> - The latest one <code>3.2.8</code> for this time of writing.</li>
<li><a href="https://github.com/codahale/bcrypt-ruby">bcrypt-ruby</a> - Needed for password hashing.</li>
<li><a href="https://github.com/defunkt/unicorn">unicorn</a> - For production, it will run as <a href="https://github.com/rack/rack">Rack</a> HTTP Server.</li>
<li><a href="http://haml.info/">haml</a> - My favorite View rendering engine.</li>
<li><a href="http://code.macournoyer.com/thin/">thin</a> - <em>Thin</em> as local server instead of default <em>Webrick</em>.</li>
<li><a href="https://bitbucket.org/ged/ruby-pg">pg</a> - My default database for production usage.</li>
</ul>


<h3>Test and Development Ruby Gems</h3>

<ul>
<li><a href="https://github.com/luislavena/sqlite3-ruby">sqlite3</a> - The database used for development and testing environments.</li>
<li><a href="https://www.relishapp.com/rspec/rspec-rails/docs">rspec-rails</a> - RSpec as default testing framework.</li>
<li><a href="http://pryrepl.org/">pry</a> - Using as default <em>Interactive Ruby</em> console instead of <code>irb</code>. Needs some configuration to be hooked as <code>rails console</code>.</li>
<li><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">factory_girl_rails</a> - The testing factory framework, used instead of the default <em>Fixtures</em>.</li>
<li><a href="https://github.com/bmabey/database_cleaner">database_cleaner</a> - Used to speed-up tests, in my case to encapsulate the tests into db transaction.</li>
<li><a href="https://github.com/michaeldv/awesome_print">awesome_print</a> - Used by <em>Pry</em> to pretty prints Ruby objects in full color exposing their internal structure with proper indentation.</li>
<li><a href="http://jnicklas.github.com/capybara/">capybara</a> - for simulating the web interaction in the tests.</li>
<li><a href="https://github.com/guard/guard-rspec">guard-rspec</a> - To refresh and run the tests upon saving via <a href="https://github.com/thibaudgg/rb-fsevent">rb-fsevent</a>.</li>
<li><a href="https://github.com/sporkrb/spork">spork</a> - The server to speed up tests, how?, see provided link.</li>
<li><a href="https://github.com/guard/guard-spork">guard-spork</a> - Refreshes the spork server on changes, so that we don't need to.</li>
</ul>


<h2>Testing configuration</h2>

<h3>RSpec</h3>

<p><em>RSpec</em> will be used as the test framework for the <code>Just ToDo it</code> app.</p>

<p>Run generator to install <em>RSpec</em> to <em>Rails</em>:</p>

<p><code>bash
$ rails g rspec:install
create  .rspec
create  spec
create  spec/spec_helper.rb
</code></p>

<h3>Guard</h3>

<p><code>bash
$ bundle exec guard init
rspec guard added to Guardfile, feel free to edit it
spork guard added to Guardfile, feel free to edit it
</code></p>

<p>Configure <code>Guardfile</code> set the <em>Spork</em> on top and <em>RSpec</em> in bottom:</p>

<p>```ruby Guardfile
guard 'spork', :cucumber_env => { 'RAILS_ENV' => 'test' }, :rspec_env => { 'RAILS_ENV' => 'test' } do
  watch('config/application.rb')
  watch('config/environment.rb')
  watch(%r{<sup>config/environments/.+.rb$})</sup>
  watch(%r{<sup>config/initializers/.+.rb$})</sup>
  watch('spec/spec_helper.rb')
  watch(%r{<sup>spec/support/.+.rb$})</sup>
end</p>

<p>guard 'rspec', cli: "--drb" do
  ...
end
```</p>

<h3>Spork</h3>

<p>Bootstrap the <em>Spork</em>:</p>

<p><code>bash
$ spork --bootstrap
Using RSpec
Bootstrapping /Users/xajler/src/rb/just-todo-it/spec/spec_helper.rb.
Done. Edit /Users/xajler/src/rb/just-todo-it/spec/spec_helper.rb now with your favorite text editor and follow the instructions.
</code></p>

<h3>RSpec Helper</h3>

<p>Edit RSpec helper:</p>

<p><code>bash
$ vim spec/spec_helper.rb
</code>
And edit to include this content:</p>

<p>```ruby spec_helper.rb
require 'rubygems'
require 'spork'
require 'database_cleaner'</p>

<p>Spork.prefork do
  ENV["RAILS_ENV"] ||= 'test'
  require File.expand_path("../../config/environment", <strong>FILE</strong>)
  require 'rspec/rails'
  require 'capybara/rspec'</p>

<p>  Dir[Rails.root.join("spec/support/<em>*/</em>.rb")].each {|f| require f}</p>

<p>  DatabaseCleaner.strategy = :truncation</p>

<p>  RSpec.configure do |config|</p>

<pre><code>config.mock_with :rspec
config.include FactoryGirl::Syntax::Methods
config.use_transactional_fixtures = true
config.infer_base_class_for_anonymous_controllers = false
config.order = "random"
</code></pre>

<p>   end
end</p>

<p>Spork.each_run do
  FactoryGirl.reload
  DatabaseCleaner.clean
end
```</p>

<p>It uses <em>Spork</em> server and the aim is to have most things in <code>prefork</code> block where is
stuff run on load of <em>Spork</em>.</p>

<p>In <code>each_run</code> block we want put only necessary things, because it runs each time,
we are now having only reloading of <em>Factory Girl</em> factories, but maybe we will add something
from <code>prefork</code> if we would have some troubles with testing data.</p>

<p><em>DatabaseCleaner</em> is used to start, on before and clean it, on after running.
The strategy used for <em>DatabaseCleaner</em> is transaction, meaning to rollback
changes after the transaction queries are finished.</p>

<h3>Run Guard</h3>

<p>The testing environment is now configured, the <em>Guard</em> can be run:</p>

<p>```bash
$ guard
uard could not detect any of the supported notification libraries.
Guard is now watching at '/Users/xajler/src/rb/just-todo-it'
Starting Spork for RSpec
Using RSpec
Preloading Rails environment
Loading Spork.prefork block...
Spork is ready and listening on 8989!
Spork server for RSpec successfully started
Guard::RSpec is running
Running all specs
Running tests with args ["--drb", "-f", "progress", "-r", "/Users/xajler/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/guard-rspec-2.1.0/lib/guard/rspec/formatter.rb", "-f", "Guard::RSpec::Formatter", "--out", "/dev/null", "--failure-exit-code", "2", "spec"]...
No examples found.</p>

<p>Finished in 0.11748 seconds
0 examples, 0 failures</p>

<p>Randomized with seed 7715</p>

<p>Done.
```</p>

<p>or use <code>bundle exec guard</code> to remove displayed warning.</p>

<p>To exit or stop the <code>guard</code> command use <code>Ctrl+C</code>.</p>

<h2>Pry as Rails Console</h2>

<p>And for the end we will set <em>Pry</em> as our default <em>Interactive Ruby</em> console.</p>

<p>Open the <code>development.rb</code>:</p>

<p><code>bash
$ vim config/enironments/development.rb
</code>
At the end of source file add code:</p>

<p><code>ruby
silence_warnings do
  require 'pry'
  IRB = Pry
end
</code></p>

<p>Try it out with <code>.pwd</code> and close the <em>Pry</em> with <code>exit</code> command:</p>

<p><code>bash
$ rails c
Loading development environment (Rails 3.2.8)
1.9.3 (main):0 &gt; .pwd
/Users/xajler/src/rb/just-todo-it
1.9.3 (main):0 &gt; exit
</code></p>

<h2>Commit Source</h2>

<p>First remove the <code>README.rdoc</code> file and create markdown <code>README.md</code>:</p>

<p><code>bash
$ rm README.rdoc
$ vim README.md
</code></p>

<p>Add simple description:</p>

<p><code>text README.md
The simple ToDo Rails App!
</code></p>

<h3>Initialize</h3>

<p>Initialize the <em>git</em> repository:</p>

<p><code>bash
$ git init
Initialized empty Git repository in /Users/xajler/src/rb/just-todo-it/.git/
</code></p>

<h3>Status</h3>

<p>See the status:</p>

<p>```bash
$ git status</p>

<h1>On branch master</h1>

<p>#</p>

<h1>Initial commit</h1>

<p>#</p>

<h1>Untracked files:</h1>

<h1>.gitignore</h1>

<h1>.rspec</h1>

<h1>Gemfile</h1>

<h1>Gemfile.lock</h1>

<h1>Guardfile</h1>

<h1>README.md</h1>

<h1>Rakefile</h1>

<h1>app/</h1>

<h1>config.ru</h1>

<h1>config/</h1>

<h1>db/</h1>

<h1>doc/</h1>

<h1>lib/</h1>

<h1>log/</h1>

<h1>public/</h1>

<h1>script/</h1>

<h1>spec/</h1>

<h1>vendor/</h1>

<p>nothing added to commit but untracked files present
```</p>

<h3>Add</h3>

<p>Then add all files:</p>

<p>```bash
$ git add .</p>

<h1>On branch master</h1>

<p>#</p>

<h1>Initial commit</h1>

<p>#</p>

<h1>Changes to be committed:</h1>

<h1>new file:   .gitignore</h1>

<h1>new file:   .rspec</h1>

<h1>new file:   Gemfile</h1>

<p>...
```</p>

<h3>Commit</h3>

<p>Commit the files to local repository:</p>

<p><code>
$ git commit -m 'Initial Commit. Created initial Rails app, added all needed Gems, testing configured'
[master (root-commit) e4517a6] Initial Commit. Created initial Rails app, added all needed Gems, testing configured
 38 files changed, 1086 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .rspec
 create mode 100644 Gemfile
</code></p>

<h3>Set Github Remote</h3>

<p>The app will be on <em>Github</em>. So after the new repository is created on <em>Github</em>, we can add
remote to the local repository:</p>

<p><code>bash
$ git remote add origin git@github.com:xajler/just-todo-it.git
</code></p>

<h3>Push to the Github</h3>

<p>After we add remote, it is now safe to push changes to <em>Github</em> remote repository:</p>

<p><code>
$ git push -u origin master
Counting objects: 63, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (47/47), done.
Writing objects: 100% (63/63), 23.32 KiB, done.
Total 63 (delta 2), reused 0 (delta 0)
To git@github.com:xajler/just-todo-it.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from origin.
</code></p>

<blockquote><p>Github xajler/just-todo-it commit:</p>

<p><a href="https://github.com/xajler/just-todo-it/commit/e4517a6390f912850c63cc60085cbd57770d22ed">Initial Commit. Created initial Rails app, added all needed Gems, testing configured</a></p></blockquote>

<h2>Conclusion</h2>

<p>It this first part we have created a <code>JustToDoIt</code> Rails application.</p>

<p>And because we shall use <em>TDD</em> (Test Driven Development) to drive this app, we first
configure the testing environment including:</p>

<ul>
<li>RSpec</li>
<li>Factory Girl</li>
<li>Database Cleaner</li>
<li>Guard</li>
<li>Spork</li>
</ul>


<p>And for the end we setup the <em>Pry</em> to be a default for <em>Rails</em> console and commit the
source to the <em>Github</em> repository <a href="https://github.com/xajler/just-todo-it">xajler/just-todo-it</a>.</p>

<p>In second post we shall go with the creating the app logic in <em>TDD</em> manner!</p>
]]></content>
  </entry>
  
</feed>
