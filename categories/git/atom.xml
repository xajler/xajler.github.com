<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Learn-a-holic Geek Notes]]></title>
  <link href="http://learnaholic.me/categories/git/atom.xml" rel="self"/>
  <link href="http://learnaholic.me/"/>
  <updated>2012-11-08T01:21:41+01:00</updated>
  <id>http://learnaholic.me/</id>
  <author>
    <name><![CDATA[Kornelije Sajler]]></name>
    <email><![CDATA[xajler@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails App from Scratch: Create and Configure for Testing]]></title>
    <link href="http://learnaholic.me/2012/10/19/rails-app-from-scratch-create-and-configure-testing/"/>
    <updated>2012-10-19T06:28:00+02:00</updated>
    <id>http://learnaholic.me/2012/10/19/rails-app-from-scratch-create-and-configure-testing</id>
    <content type="html"><![CDATA[<p>This blog post will be one many showing how to create <em>Todo</em> the <em>Rails 3</em> application.
The first post will be creating the Rails application and setting up the testing environment.</p>

<p> The app will be called <em>Just ToDo it</em>, just as famous
 <a href="https://en.wikipedia.org/wiki/Just_Do_It_(Nike)" target="_blank">Nike slogan</a>. And also Gods of DNS where
 good to me so the <em>Domain</em> <code>justtodoit.com</code> is free so I bought it and the final stage of this
 Rails posts will be deployment to <em>VPS</em> and pointing to the domain <a href="http://justtodoit.com">JustToDoIt</a>
 (Currently displays my domain <a href="http://metaintellect.com">metaintellect</a>).</p>

<h2>Create application</h2>

<p>The command to create new Rails application and omitting default testing framework <em>Unit::Test</em>
with switch <code>-T</code> or longer version is <code>--skip-test-unit</code></p>

<p><code>bash
$ rails new JustToDoIt -T
create
create  README.rdoc
create  Rakefile
create  config.ru
create  .gitignore
create  Gemfile
create  app
...
</code></p>

<p>I had capitalized <code>JustToDoIt</code> before, because the name is used as Ruby class and Pascal case is convention
for Ruby classes.</p>

<p>Then rename folder to <code>just-todo-it</code> to be more in *nix folder naming convention:</p>

<p><code>bash
$ mv JustToDoIt just-todo-it
</code></p>

<p>The fun starts when the directory is changed to Rails app directory:</p>

<p><code>bash
$ cd just-todo-it
</code></p>

<h2>Text editor</h2>

<p>I'll use <em>vim</em> as a default text editor, for <em>TextMate</em> use <code>mate</code> and for the <em>Sublime Text 2</em> use
<code>subl</code> terminal commands for editing files instead of <code>vim</code>.</p>

<h2>Gemfile</h2>

<p>First open the <code>Gemfile</code>, we need to add some <em>gems</em> that will be used in the app and also
for testing:</p>

<p><code>bash
$ vim Gemfile
</code>
Edit it to include this gems:</p>

<p>```ruby Gemfile
source 'https://rubygems.org'</p>

<p>gem 'rails'
gem 'bcrypt-ruby'
gem 'unicorn'
gem 'haml'
gem 'thin'
gem 'pg'</p>

<p>group :test, :development do
  gem 'sqlite3'
  gem 'rspec-rails'
  gem 'pry'
  gem 'factory_girl_rails'
  gem 'database_cleaner'
  gem 'awesome_print'
  gem 'capybara'
  gem 'rb-fsevent', :require => false if RUBY_PLATFORM =~ /darwin/i
  gem 'guard-rspec'
  gem 'spork'
  gem 'guard-spork'
end</p>

<p>group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier', '>= 1.0.3'
end</p>

<p>gem 'jquery-rails'
```</p>

<p>After changing the <code>Gemfile</code> run <em>bundler</em> to update and download entered <em>gems</em>:</p>

<p><code>bash
$ bundle install
</code></p>

<h3>Main and Production Ruby Gems</h3>

<ul>
<li><a href="http://rubyonrails.org/">rails</a> - The latest one <code>3.2.8</code> for this time of writing.</li>
<li><a href="https://github.com/codahale/bcrypt-ruby">bcrypt-ruby</a> - Needed for password hashing.</li>
<li><a href="https://github.com/defunkt/unicorn">unicorn</a> - For production, it will run as <a href="https://github.com/rack/rack">Rack</a> HTTP Server.</li>
<li><a href="http://haml.info/">haml</a> - My favorite View rendering engine.</li>
<li><a href="http://code.macournoyer.com/thin/">thin</a> - <em>Thin</em> as local server instead of default <em>Webrick</em>.</li>
<li><a href="https://bitbucket.org/ged/ruby-pg">pg</a> - My default database for production usage.</li>
</ul>


<h3>Test and Development Ruby Gems</h3>

<ul>
<li><a href="https://github.com/luislavena/sqlite3-ruby">sqlite3</a> - The database used for development and testing environments.</li>
<li><a href="https://www.relishapp.com/rspec/rspec-rails/docs">rspec-rails</a> - RSpec as default testing framework.</li>
<li><a href="http://pryrepl.org/">pry</a> - Using as default <em>Interactive Ruby</em> console instead of <code>irb</code>. Needs some configuration to be hooked as <code>rails console</code>.</li>
<li><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">factory_girl_rails</a> - The testing factory framework, used instead of the default <em>Fixtures</em>.</li>
<li><a href="https://github.com/bmabey/database_cleaner">database_cleaner</a> - Used to speed-up tests, in my case to encapsulate the tests into db transaction.</li>
<li><a href="https://github.com/michaeldv/awesome_print">awesome_print</a> - Used by <em>Pry</em> to pretty prints Ruby objects in full color exposing their internal structure with proper indentation.</li>
<li><a href="http://jnicklas.github.com/capybara/">capybara</a> - for simulating the web interaction in the tests.</li>
<li><a href="https://github.com/guard/guard-rspec">guard-rspec</a> - To refresh and run the tests upon saving via <a href="https://github.com/thibaudgg/rb-fsevent">rb-fsevent</a>.</li>
<li><a href="https://github.com/sporkrb/spork">spork</a> - The server to speed up tests, how?, see provided link.</li>
<li><a href="https://github.com/guard/guard-spork">guard-spork</a> - Refreshes the spork server on changes, so that we don't need to.</li>
</ul>


<h2>Testing configuration</h2>

<h3>RSpec</h3>

<p><em>RSpec</em> will be used as the test framework for the <code>Just ToDo it</code> app.</p>

<p>Run generator to install <em>RSpec</em> to <em>Rails</em>:</p>

<p><code>bash
$ rails g rspec:install
create  .rspec
create  spec
create  spec/spec_helper.rb
</code></p>

<h3>Guard</h3>

<p><code>bash
$ bundle exec guard init
rspec guard added to Guardfile, feel free to edit it
spork guard added to Guardfile, feel free to edit it
</code></p>

<p>Configure <code>Guardfile</code> set the <em>Spork</em> on top and <em>RSpec</em> in bottom:</p>

<p>```ruby Guardfile
guard 'spork', :cucumber_env => { 'RAILS_ENV' => 'test' }, :rspec_env => { 'RAILS_ENV' => 'test' } do
  watch('config/application.rb')
  watch('config/environment.rb')
  watch(%r{<sup>config/environments/.+.rb$})</sup>
  watch(%r{<sup>config/initializers/.+.rb$})</sup>
  watch('spec/spec_helper.rb')
  watch(%r{<sup>spec/support/.+.rb$})</sup>
end</p>

<p>guard 'rspec', cli: "--drb" do
  ...
end
```</p>

<h3>Spork</h3>

<p>Bootstrap the <em>Spork</em>:</p>

<p><code>bash
$ spork --bootstrap
Using RSpec
Bootstrapping /Users/xajler/src/rb/just-todo-it/spec/spec_helper.rb.
Done. Edit /Users/xajler/src/rb/just-todo-it/spec/spec_helper.rb now with your favorite text editor and follow the instructions.
</code></p>

<h3>RSpec Helper</h3>

<p>Edit RSpec helper:</p>

<p><code>bash
$ vim spec/spec_helper.rb
</code>
And edit to include this content:</p>

<p>```ruby spec_helper.rb
require 'rubygems'
require 'spork'
require 'database_cleaner'</p>

<p>Spork.prefork do
  ENV["RAILS_ENV"] ||= 'test'
  require File.expand_path("../../config/environment", <strong>FILE</strong>)
  require 'rspec/rails'
  require 'capybara/rspec'</p>

<p>  Dir[Rails.root.join("spec/support/<em>*/</em>.rb")].each {|f| require f}</p>

<p>  DatabaseCleaner.strategy = :truncation</p>

<p>  RSpec.configure do |config|</p>

<pre><code>config.mock_with :rspec
config.include FactoryGirl::Syntax::Methods
config.use_transactional_fixtures = true
config.infer_base_class_for_anonymous_controllers = false
config.order = "random"
</code></pre>

<p>   end
end</p>

<p>Spork.each_run do
  FactoryGirl.reload
  DatabaseCleaner.clean
end
```</p>

<p>It uses <em>Spork</em> server and the aim is to have most things in <code>prefork</code> block where is
stuff run on load of <em>Spork</em>.</p>

<p>In <code>each_run</code> block we want put only necessary things, because it runs each time,
we are now having only reloading of <em>Factory Girl</em> factories, but maybe we will add something
from <code>prefork</code> if we would have some troubles with testing data.</p>

<p><em>DatabaseCleaner</em> is used to start, on before and clean it, on after running.
The strategy used for <em>DatabaseCleaner</em> is transaction, meaning to rollback
changes after the transaction queries are finished.</p>

<h3>Run Guard</h3>

<p>The testing environment is now configured, the <em>Guard</em> can be run:</p>

<p>```bash
$ guard
uard could not detect any of the supported notification libraries.
Guard is now watching at '/Users/xajler/src/rb/just-todo-it'
Starting Spork for RSpec
Using RSpec
Preloading Rails environment
Loading Spork.prefork block...
Spork is ready and listening on 8989!
Spork server for RSpec successfully started
Guard::RSpec is running
Running all specs
Running tests with args ["--drb", "-f", "progress", "-r", "/Users/xajler/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/guard-rspec-2.1.0/lib/guard/rspec/formatter.rb", "-f", "Guard::RSpec::Formatter", "--out", "/dev/null", "--failure-exit-code", "2", "spec"]...
No examples found.</p>

<p>Finished in 0.11748 seconds
0 examples, 0 failures</p>

<p>Randomized with seed 7715</p>

<p>Done.
```</p>

<p>or use <code>bundle exec guard</code> to remove displayed warning.</p>

<p>To exit or stop the <code>guard</code> command use <code>Ctrl+C</code>.</p>

<h2>Pry as Rails Console</h2>

<p>And for the end we will set <em>Pry</em> as our default <em>Interactive Ruby</em> console.</p>

<p>Open the <code>development.rb</code>:</p>

<p><code>bash
$ vim config/enironments/development.rb
</code>
At the end of source file add code:</p>

<p><code>ruby
silence_warnings do
  require 'pry'
  IRB = Pry
end
</code></p>

<p>Try it out with <code>.pwd</code> and close the <em>Pry</em> with <code>exit</code> command:</p>

<p><code>bash
$ rails c
Loading development environment (Rails 3.2.8)
1.9.3 (main):0 &gt; .pwd
/Users/xajler/src/rb/just-todo-it
1.9.3 (main):0 &gt; exit
</code></p>

<h2>Commit Source</h2>

<p>First remove the <code>README.rdoc</code> file and create markdown <code>README.md</code>:</p>

<p><code>bash
$ rm README.rdoc
$ vim README.md
</code></p>

<p>Add simple description:</p>

<p><code>text README.md
The simple ToDo Rails App!
</code></p>

<h3>Initialize</h3>

<p>Initialize the <em>git</em> repository:</p>

<p><code>bash
$ git init
Initialized empty Git repository in /Users/xajler/src/rb/just-todo-it/.git/
</code></p>

<h3>Status</h3>

<p>See the status:</p>

<p>```bash
$ git status</p>

<h1>On branch master</h1>

<p>#</p>

<h1>Initial commit</h1>

<p>#</p>

<h1>Untracked files:</h1>

<h1>.gitignore</h1>

<h1>.rspec</h1>

<h1>Gemfile</h1>

<h1>Gemfile.lock</h1>

<h1>Guardfile</h1>

<h1>README.md</h1>

<h1>Rakefile</h1>

<h1>app/</h1>

<h1>config.ru</h1>

<h1>config/</h1>

<h1>db/</h1>

<h1>doc/</h1>

<h1>lib/</h1>

<h1>log/</h1>

<h1>public/</h1>

<h1>script/</h1>

<h1>spec/</h1>

<h1>vendor/</h1>

<p>nothing added to commit but untracked files present
```</p>

<h3>Add</h3>

<p>Then add all files:</p>

<p>```bash
$ git add .</p>

<h1>On branch master</h1>

<p>#</p>

<h1>Initial commit</h1>

<p>#</p>

<h1>Changes to be committed:</h1>

<h1>new file:   .gitignore</h1>

<h1>new file:   .rspec</h1>

<h1>new file:   Gemfile</h1>

<p>...
```</p>

<h3>Commit</h3>

<p>Commit the files to local repository:</p>

<p><code>
$ git commit -m 'Initial Commit. Created initial Rails app, added all needed Gems, testing configured'
[master (root-commit) e4517a6] Initial Commit. Created initial Rails app, added all needed Gems, testing configured
 38 files changed, 1086 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .rspec
 create mode 100644 Gemfile
</code></p>

<h3>Set Github Remote</h3>

<p>The app will be on <em>Github</em>. So after the new repository is created on <em>Github</em>, we can add
remote to the local repository:</p>

<p><code>bash
$ git remote add origin git@github.com:xajler/just-todo-it.git
</code></p>

<h3>Push to the Github</h3>

<p>After we add remote, it is now safe to push changes to <em>Github</em> remote repository:</p>

<p><code>
$ git push -u origin master
Counting objects: 63, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (47/47), done.
Writing objects: 100% (63/63), 23.32 KiB, done.
Total 63 (delta 2), reused 0 (delta 0)
To git@github.com:xajler/just-todo-it.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from origin.
</code></p>

<h2>Conclusion</h2>

<p>It this first part we have created a <code>JustToDoIt</code> Rails application.</p>

<p>And because we shall use <em>TDD</em> (Test Driven Development) to drive this app, we first
configure the testing environment including:</p>

<ul>
<li>RSpec</li>
<li>Factory Girl</li>
<li>Database Cleaner</li>
<li>Guard</li>
<li>Spork</li>
</ul>


<p>And for the end we setup the <em>Pry</em> to be a default for <em>Rails</em> console and commit the
source to the <em>Github</em> repository <a href="https://github.com/xajler/just-todo-it">xajler/just-todo-it</a>.</p>

<p>In second post we shall go with the creating the app logic in <em>TDD</em> way!</p>

<h2>Code</h2>

<p>The code is hosted on GitHub and can be cloned from the <a href="https://github.com/xajler/just-todo-it">xajler/just-todo-it</a>.</p>

<blockquote><p>Github xajler/just-todo-it commit for this post:</p>

<p><a href="https://github.com/xajler/just-todo-it/commit/e4517a6390f912850c63cc60085cbd57770d22ed">Initial Commit. Created initial Rails app, added all needed Gems, testing configured</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Powershell, SSH Github and git suck less on Windows]]></title>
    <link href="http://learnaholic.me/2012/10/12/make-powershell-and-git-suck-less-on-windows/"/>
    <updated>2012-10-12T03:41:00+02:00</updated>
    <id>http://learnaholic.me/2012/10/12/make-powershell-and-git-suck-less-on-windows</id>
    <content type="html"><![CDATA[<p>There are two Terminals in Windows <em>Command Prompt</em> and <em>Powershell</em>, and they both suck by far.
I can understand that <em>Command Prompt</em> is no good, but why the <em>Powershell</em> wasn't done better?!</p>

<p>The things missing in <em>Powershell</em>:</p>

<ul>
<li>Maximizing is just so mid '90.</li>
<li>History for a session only (So annoying).</li>
<li>Painful adding of Aliases.</li>
<li>Emacs navigation (<code>Ctrl+a</code>,<code>Ctrl+e</code>,...).</li>
<li>Full screen and Tranparency (Oh I just want too much).</li>
<li>The config dir is in <code>Documents\WindowsPowerShell</code> (WTF).</li>
</ul>


<p>Maybe to most Windows users this is strange because this kind of stuff is never used, but if
you're coming from <em>Linux</em> or <em>Mac</em> then the frustration is certain. Because <em>Linux</em> or <em>Mac</em> are
having great Terminal and working in them is just a joy.</p>

<p>The aim of post is to install <em>git</em> on Windowns and then configure it.
Then customize a little bit the <em>Powershell</em> because the defaults are just crime against humanity.
Configure <em>SSH</em> on machine and register <em>SSH</em> key with Github.
Install must-have <a href="https://github.com/dahlbyk/posh-git">posh-git</a> that will add the branch/status
to <em>Powershell</em> prompt plus auto-completion for <em>git</em>.</p>

<p>Note that I'm using Windows 8 and <em>Powershell</em> version 3.0.</p>

<h2>Git Install</h2>

<p>For those who might don't know the <em>git</em> is created by Linus Torvalds the creator of <em>Linux Kernel</em>.
<em>Git</em> was a  product of his frustration maintaining <em>Linux Kernel</em>. He is not really the
huge fan of Windows (nor am I) so <em>git</em> Windows implementation was hard to do because it
really relies on <em>Unix/Linux</em> commands and philosophies that are lacking on Windows.</p>

<p>I know there was a problem I while back with the <a href="http://git-scm.com/downloads">official Git version for Windows</a>
and I was always using the <a href="https://code.google.com/p/msysgit">msysgit</a>,
don't know if still is the case but I will use <em>msysgit</em> in this post.</p>

<p>Download the latest <a href="https://code.google.com/p/msysgit/downloads/list">msysgit</a> and install it
with just clicking next few times.  There are few things to configure, but using defaults is safest way.</p>

<blockquote><p>Note:</p>

<p>There is also a <a href="http://windows.github.com/">Github for Windows</a>. Probably even easier way to
install and configure <em>git</em> on Windows, but I like to complicate things.</p></blockquote>

<h2>Add Git to PATH</h2>

<p>By default the <em>git</em> binaries are not set in to PATH, so add it by going to:</p>

<pre><code>Control Panel/System and Security/System/Advanced system settings
</code></pre>

<p>Then in <em>System Properties</em> click on <em>Environment Variables...</em> and in <em>System Variables</em> list box
scroll to <em>Variable</em> <code>Path</code>, double-click it and add at the end:</p>

<pre><code>;C:\Program Files (x86)\Git\cmd;C:\Program Files (x86)\Git\bin;
</code></pre>

<p>Test that the <em>git</em> is available by opening the <em>Powershell</em>. Easiest way to open te <em>Powershell</em>
(if there is no shortcut) especially in Windows 8 is <code>Win+r</code> and type <code>powershell</code> to prompt.</p>

<p>In <em>Powershell</em> type:</p>

<p>```
C:> git
usage: git [--version] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]</p>

<pre><code>       [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
       [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]
       [-c name=value] [--help]
       &lt;command&gt; [&lt;args&gt;]
</code></pre>

<p>...
```</p>

<p>If you get something like <em>usage: git</em>, then the <em>git</em> is ready!</p>

<h2>Configure Git</h2>

<p>Set the user name that will be readable in <em>git</em> log or history:</p>

<p><code>text
C:\&gt; git config --global user.name "Kornelije Sajler"
</code></p>

<p>Then set your email:</p>

<p><code>text
C:\&gt; git config --global user.email "xajler@gmail.com"
</code></p>

<blockquote><p>Note:</p>

<p>Your email address for Git should be the same one associated with your GitHub account.</p></blockquote>

<h2>Generate SSH key</h2>

<p>With <em>msysgit</em> comes a <em>Git Bash</em> needed to generate <em>SSH</em> keys. If you have one skip this step!</p>

<p>To open <em>Git Bash</em> right-click on any folder in <em>Windows Explorer</em> and choose <em>Git Bash</em>.
In <em>Git Bash</em> enter:</p>

<p><code>bash
$ ssh-keygen -t rsa -C "xajler@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/Kornelije/.ssh/id_rsa):
</code>
Keygen will ask you for passphrase. In my first attempt I've added one, but on each commit I have to enter
passphrase. That is so annoying.</p>

<p>If you have a <em>SSH</em> key passphrase and it annoys you then enter:</p>

<p><code>bash
$ ssh-keygen -p
</code>
It will ask you for current passphrase, enter the current passphrasse, and with two enters,
you'll now have a blank passphrase!</p>

<h3>Git Bash Copy/Paste</h3>

<p>The copy/paste is so awful in <em>Git Bash</em>. To paste you need to click the icon in top left corner,
go to <code>Edit</code> then <code>Paste</code>.</p>

<p>The copy is even more cumbersome, I'll just give you a hint, choose <code>Select All</code>!</p>

<p><img src="http://i47.tinypic.com/kei238.png"></p>

<p>Or read at the end in <em>Options Tab</em> part of <em>Powershell Customization</em> to enable <em>QuickEdit Mode</em>.</p>

<h2>Set SSH key to Github</h2>

<p>To set the public <em>SSH</em> key in <a href="http://github.com">Github</a> there is need for getting it from a
<code>~/.ssh/id_rsa.pub</code>.</p>

<p>Again open <em>Git Bash</em> right-click on any folder in <em>Windows Explorer</em> and choose <em>Git Bash</em>.
In <em>Git Bash</em> enter:</p>

<p><code>bash
$ clip &lt; ~/.ssh/id_rsa.pub
</code></p>

<p>This command will copy your public <em>SSH</em> key to clipboard. Then go to
<a href="https://github.com/settings/ssh">Github / Account Settngs / SSH Keys</a> and click the button
<code>Add SSH Key</code>.</p>

<p>Enter Title (sorry about my title):</p>

<pre><code>win-shit
</code></pre>

<p>Enter Key:</p>

<pre><code>Just paste from clipboard
</code></pre>

<p>By clicking <code>Add Key</code> you have successfully added <em>SSH</em> key to <a href="http://github.com">Github</a> and
the <em>git</em> pushing to <a href="http://github.com">Github</a> is now super easy.</p>

<h2>Powershell customization</h2>

<p>The visual features of <em>Powershell</em> probably didn't change since Windows 95, and defaults
are probably still dating from '95 and selecting, copy, pasting is awkward, hard and unusable!</p>

<h3>Suck less Powershell</h3>

<p>Click the small <em>Powershell</em> icon in top left corner, and in the context menu click on <code>Properties</code>.</p>

<h4>Options Tab</h4>

<p>In <code>Edit Options</code> check the <code>QuickEdit Mode</code>. Quick edit mode enables selecting text from
anywhere in <em>Powershell</em> and with right-click it will copy the selected content.
Also with single right-click pastes the text where the blinking cursor
currently is, similar to <em>putty</em>.</p>

<p>This option really boosts the productivity in <em>Powershell</em>, it is too bad that this is
not set by default!</p>

<h4>Font Tab</h4>

<p>Even we are in 21st century but the <em>Powershell</em> is still set by default to <code>Raster Fonts</code> with
awkward sizes like 16x12, 6x8, that I never really get the meaning of.</p>

<p>In <code>Font</code> list choose the <em>Consolas</em> font (or other available mono-space font) and you can check the
<code>Bold fonts</code> if you like to have bold text. As for <code>Size</code> in list choose whatever you want
I'll stick to <code>18</code>.</p>

<h4>Layout Tab</h4>

<p>The <em>Powershell</em> by default is very small, at least to me, maximize is totally unusable, there is
no full screen!</p>

<p><code>Screen Buffer Size</code> and <code>Window Position</code> <em>Width</em> height should be same size if you dont want
to have ugly horizontal scroll bar. I set <em>Width</em> to <code>125</code> and <code>Window Position</code> <em>Height</em> to <code>35</code>.</p>

<p>This are all customization, it is not too much but <em>Powershell</em> suck a little less after it,
but there is a room for lots and lots of improvements, while Microsoft spends time on
useless technologies like <em>Light Switch</em>.</p>

<h2>Posh-Git: Make your Git shine in Powershell</h2>

<p>A set of <em>Powershell</em> scripts which provide <em>Git/PowerShell</em> integration. Includes:</p>

<ul>
<li>Prompt for Git repositories - shows the current branch and the state of files (additions, modifications, deletions) within.</li>
<li>Tab completion for <em>git</em> commands.</li>
</ul>


<h3>Install</h3>

<p>Clone it from <em>Github</em> to any folder, I'll clone it in <code>source</code> folder:</p>

<p><code>text
C:\source &gt; git clone git://github.com/dahlbyk/posh-git.git
</code></p>

<p>Verify execution of <em>Powershell</em> scripts is allowed with:</p>

<p><code>text
C:\source &gt; Get-ExecutionPolicy
</code></p>

<p>The result should be <em>RemoteSigned</em>  or <em>Unrestricted</em>.</p>

<p>If scripts are not enabled, run <em>Powershell</em> as Administrator and call:</p>

<p><code>text
C:\source &gt; Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm
</code></p>

<p>Then <code>cd</code> to <code>posh-git</code> folder and run:</p>

<p>```text
C:\source\posh-git > .\install.ps1
Creating PowerShell profile...
D:\MyData\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
Adding posh-git to profile...
posh-git successfully installed!
Please reload your profile for the changes to take effect:</p>

<pre><code>. $PROFILE
</code></pre>

<p>```</p>

<p>Then reload your profile, as noted in <em>posh-git</em> after install note:</p>

<p><code>text
C:\source\posh-git &gt; . $PROFILE
</code></p>

<p>If you're done everything from this post then everything should work just fine!</p>

<p>The outcome of whole post is to have something at the end of the day:</p>

<p><img src="http://i46.tinypic.com/25ian4n.png"></p>

<p>And just for comparison the <em>Terminal iTerm2</em> on my <em>Mac OS X Mountain Lion</em> with <em>zsh shell</em>
and very short aliases, pure awesomeness:</p>

<p><img src="http://i46.tinypic.com/33fggut.png"></p>
]]></content>
  </entry>
  
</feed>
