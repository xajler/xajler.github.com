<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Learn-a-holic Geek Notes]]></title>
  <link href="http://learnaholic.me/categories/github/atom.xml" rel="self"/>
  <link href="http://learnaholic.me/"/>
  <updated>2012-10-19T06:56:29+02:00</updated>
  <id>http://learnaholic.me/</id>
  <author>
    <name><![CDATA[Kornelije Sajler]]></name>
    <email><![CDATA[xajler@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Powershell, SSH Github and git suck less on Windows]]></title>
    <link href="http://learnaholic.me/2012/10/12/make-powershell-and-git-suck-less-on-windows/"/>
    <updated>2012-10-12T03:41:00+02:00</updated>
    <id>http://learnaholic.me/2012/10/12/make-powershell-and-git-suck-less-on-windows</id>
    <content type="html"><![CDATA[<p>There are two Terminals in Windows <em>Command Prompt</em> and <em>Powershell</em>, and they both suck by far.
I can understand that <em>Command Prompt</em> is no good, but why the <em>Powershell</em> wasn't done better?!</p>

<p>The things missing in <em>Powershell</em>:</p>

<ul>
<li>Maximizing is just so mid '90.</li>
<li>History for a session only (So annoying).</li>
<li>Painful adding of Aliases.</li>
<li>Emacs navigation (<code>Ctrl+a</code>,<code>Ctrl+e</code>,...).</li>
<li>Full screen and Tranparency (Oh I just want too much).</li>
<li>The config dir is in <code>Documents\WindowsPowerShell</code> (WTF).</li>
</ul>


<p>Maybe to most Windows users this is strange because this kind of stuff is never used, but if
you're coming from <em>Linux</em> or <em>Mac</em> then the frustration is certain. Because <em>Linux</em> or <em>Mac</em> are
having great Terminal and working in them is just a joy.</p>

<p>The aim of post is to install <em>git</em> on Windowns and then configure it.
Then customize a little bit the <em>Powershell</em> because the defaults are just crime against humanity.
Configure <em>SSH</em> on machine and register <em>SSH</em> key with Github.
Install must-have <a href="https://github.com/dahlbyk/posh-git">posh-git</a> that will add the branch/status
to <em>Powershell</em> prompt plus auto-completion for <em>git</em>.</p>

<p>Note that I'm using Windows 8 and <em>Powershell</em> version 3.0.</p>

<h2>Git Install</h2>

<p>For those who might don't know the <em>git</em> is created by Linus Torvalds the creator of <em>Linux Kernel</em>.
<em>Git</em> was a  product of his frustration maintaining <em>Linux Kernel</em>. He is not really the
huge fan of Windows (nor am I) so <em>git</em> Windows implementation was hard to do because it
really relies on <em>Unix/Linux</em> commands and philosophies that are lacking on Windows.</p>

<p>I know there was a problem I while back with the <a href="http://git-scm.com/downloads">official Git version for Windows</a>
and I was always using the <a href="https://code.google.com/p/msysgit">msysgit</a>,
don't know if still is the case but I will use <em>msysgit</em> in this post.</p>

<p>Download the latest <a href="https://code.google.com/p/msysgit/downloads/list">msysgit</a> and install it
with just clicking next few times.  There are few things to configure, but using defaults is safest way.</p>

<blockquote><p>Note:</p>

<p>There is also a <a href="http://windows.github.com/">Github for Windows</a>. Probably even easier way to
install and configure <em>git</em> on Windows, but I like to complicate things.</p></blockquote>

<h2>Add Git to PATH</h2>

<p>By default the <em>git</em> binaries are not set in to PATH, so add it by going to:</p>

<pre><code>Control Panel/System and Security/System/Advanced system settings
</code></pre>

<p>Then in <em>System Properties</em> click on <em>Environment Variables...</em> and in <em>System Variables</em> list box
scroll to <em>Variable</em> <code>Path</code>, double-click it and add at the end:</p>

<pre><code>;C:\Program Files (x86)\Git\cmd;C:\Program Files (x86)\Git\bin;
</code></pre>

<p>Test that the <em>git</em> is available by opening the <em>Powershell</em>. Easiest way to open te <em>Powershell</em>
(if there is no shortcut) especially in Windows 8 is <code>Win+r</code> and type <code>powershell</code> to prompt.</p>

<p>In <em>Powershell</em> type:</p>

<p>```
C:> git
usage: git [--version] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]</p>

<pre><code>       [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
       [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]
       [-c name=value] [--help]
       &lt;command&gt; [&lt;args&gt;]
</code></pre>

<p>...
```</p>

<p>If you get something like <em>usage: git</em>, then the <em>git</em> is ready!</p>

<h2>Configure Git</h2>

<p>Set the user name that will be readable in <em>git</em> log or history:</p>

<p><code>text
C:\&gt; git config --global user.name "Kornelije Sajler"
</code></p>

<p>Then set your email:</p>

<p><code>text
C:\&gt; git config --global user.email "xajler@gmail.com"
</code></p>

<blockquote><p>Note:</p>

<p>Your email address for Git should be the same one associated with your GitHub account.</p></blockquote>

<h2>Generate SSH key</h2>

<p>With <em>msysgit</em> comes a <em>Git Bash</em> needed to generate <em>SSH</em> keys. If you have one skip this step!</p>

<p>To open <em>Git Bash</em> right-click on any folder in <em>Windows Explorer</em> and choose <em>Git Bash</em>.
In <em>Git Bash</em> enter:</p>

<p><code>bash
$ ssh-keygen -t rsa -C "xajler@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/Kornelije/.ssh/id_rsa):
</code>
Keygen will ask you for passphrase. In my first attempt I've added one, but on each commit I have to enter
passphrase. That is so annoying.</p>

<p>If you have a <em>SSH</em> key passphrase and it annoys you then enter:</p>

<p><code>bash
$ ssh-keygen -p
</code>
It will ask you for current passphrase, enter the current passphrasse, and with two enters,
you'll now have a blank passphrase!</p>

<h3>Git Bash Copy/Paste</h3>

<p>The copy/paste is so awful in <em>Git Bash</em>. To paste you need to click the icon in top left corner,
go to <code>Edit</code> then <code>Paste</code>.</p>

<p>The copy is even more cumbersome, I'll just give you a hint, choose <code>Select All</code>!</p>

<p><img src="http://i47.tinypic.com/kei238.png"></p>

<p>Or read at the end in <em>Options Tab</em> part of <em>Powershell Customization</em> to enable <em>QuickEdit Mode</em>.</p>

<h2>Set SSH key to Github</h2>

<p>To set the public <em>SSH</em> key in <a href="http://github.com">Github</a> there is need for getting it from a
<code>~/.ssh/id_rsa.pub</code>.</p>

<p>Again open <em>Git Bash</em> right-click on any folder in <em>Windows Explorer</em> and choose <em>Git Bash</em>.
In <em>Git Bash</em> enter:</p>

<p><code>bash
$ clip &lt; ~/.ssh/id_rsa.pub
</code></p>

<p>This command will copy your public <em>SSH</em> key to clipboard. Then go to
<a href="https://github.com/settings/ssh">Github / Account Settngs / SSH Keys</a> and click the button
<code>Add SSH Key</code>.</p>

<p>Enter Title (sorry about my title):</p>

<pre><code>win-shit
</code></pre>

<p>Enter Key:</p>

<pre><code>Just paste from clipboard
</code></pre>

<p>By clicking <code>Add Key</code> you have successfully added <em>SSH</em> key to <a href="http://github.com">Github</a> and
the <em>git</em> pushing to <a href="http://github.com">Github</a> is now super easy.</p>

<h2>Powershell customization</h2>

<p>The visual features of <em>Powershell</em> probably didn't change since Windows 95, and defaults
are probably still dating from '95 and selecting, copy, pasting is awkward, hard and unusable!</p>

<h3>Suck less Powershell</h3>

<p>Click the small <em>Powershell</em> icon in top left corner, and in the context menu click on <code>Properties</code>.</p>

<h4>Options Tab</h4>

<p>In <code>Edit Options</code> check the <code>QuickEdit Mode</code>. Quick edit mode enables selecting text from
anywhere in <em>Powershell</em> and with right-click it will copy the selected content.
Also with single right-click pastes the text where the blinking cursor
currently is, similar to <em>putty</em>.</p>

<p>This option really boosts the productivity in <em>Powershell</em>, it is too bad that this is
not set by default!</p>

<h4>Font Tab</h4>

<p>Even we are in 21st century but the <em>Powershell</em> is still set by default to <code>Raster Fonts</code> with
awkward sizes like 16x12, 6x8, that I never really get the meaning of.</p>

<p>In <code>Font</code> list choose the <em>Consolas</em> font (or other available mono-space font) and you can check the
<code>Bold fonts</code> if you like to have bold text. As for <code>Size</code> in list choose whatever you want
I'll stick to <code>18</code>.</p>

<h4>Layout Tab</h4>

<p>The <em>Powershell</em> by default is very small, at least to me, maximize is totally unusable, there is
no full screen!</p>

<p><code>Screen Buffer Size</code> and <code>Window Position</code> <em>Width</em> height should be same size if you dont want
to have ugly horizontal scroll bar. I set <em>Width</em> to <code>125</code> and <code>Window Position</code> <em>Height</em> to <code>35</code>.</p>

<p>This are all customization, it is not too much but <em>Powershell</em> suck a little less after it,
but there is a room for lots and lots of improvements, while Microsoft spends time on
useless technologies like <em>Light Switch</em>.</p>

<h2>Posh-Git: Make your Git shine in Powershell</h2>

<p>A set of <em>Powershell</em> scripts which provide <em>Git/PowerShell</em> integration. Includes:</p>

<ul>
<li>Prompt for Git repositories - shows the current branch and the state of files (additions, modifications, deletions) within.</li>
<li>Tab completion for <em>git</em> commands.</li>
</ul>


<h3>Install</h3>

<p>Clone it from <em>Github</em> to any folder, I'll clone it in <code>source</code> folder:</p>

<p><code>text
C:\source &gt; git clone git://github.com/dahlbyk/posh-git.git
</code></p>

<p>Verify execution of <em>Powershell</em> scripts is allowed with:</p>

<p><code>text
C:\source &gt; Get-ExecutionPolicy
</code></p>

<p>The result should be <em>RemoteSigned</em>  or <em>Unrestricted</em>.</p>

<p>If scripts are not enabled, run <em>Powershell</em> as Administrator and call:</p>

<p><code>text
C:\source &gt; Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm
</code></p>

<p>Then <code>cd</code> to <code>posh-git</code> folder and run:</p>

<p>```text
C:\source\posh-git > .\install.ps1
Creating PowerShell profile...
D:\MyData\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
Adding posh-git to profile...
posh-git successfully installed!
Please reload your profile for the changes to take effect:</p>

<pre><code>. $PROFILE
</code></pre>

<p>```</p>

<p>Then reload your profile, as noted in <em>posh-git</em> after install note:</p>

<p><code>text
C:\source\posh-git &gt; . $PROFILE
</code></p>

<p>If you're done everything from this post then everything should work just fine!</p>

<p>The outcome of whole post is to have something at the end of the day:</p>

<p><img src="http://i46.tinypic.com/25ian4n.png"></p>

<p>And just for comparison the <em>Terminal iTerm2</em> on my <em>Mac OS X Mountain Lion</em> with <em>zsh shell</em>
and very short aliases, pure awesomeness:</p>

<p><img src="http://i46.tinypic.com/33fggut.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Octopress to Github Pages and setting custom subdomain CNAME]]></title>
    <link href="http://learnaholic.me/2012/10/10/deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname/"/>
    <updated>2012-10-10T23:49:00+02:00</updated>
    <id>http://learnaholic.me/2012/10/10/deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname</id>
    <content type="html"><![CDATA[<p>Blogging was really never easy task for me, I started in 2006 with <a href="http://wordpress.com">WordPress</a> but with short life.
The more about my blogging history can be read in my blog post
<a href="http://www.learnaholic.me/2009/04/26/hello-world/">and finally comes time for Blogging!</a> on my
old blogging site <a href="http://www.learnaholic.me">Learn-a-holic</a>.</p>

<h2>Blog Engines</h2>

<p>So far I was on this blog engines, chronologically:</p>

<ul>
<li><a href="http://wordpress.com">WordPress</a> (2006 - 2008)</li>
<li><a href="https://graffiticms.codeplex.com/">Graffiti CMS</a> (2008)</li>
<li><a href="http://www.dotnetblogengine.net/">BlogEngine.NET</a> (2009)</li>
<li><a href="http://wordpress.com">WordPress</a> (2009 - 2012)</li>
</ul>


<p>So far I was always coming back to <a href="http://wordpress.com">WordPress</a>, but I was never actually satisfied in writing
posts in it, everything other than that is plain perfect on <a href="http://wordpress.com">WordPress</a>.
This is why I haven't blogging for nearly two years.</p>

<p>Nowdays I really like <a href="http://daringfireball.net/projects/markdown/">markdown</a>
or any similar kind of markup language (<a href="http://redcloth.org/textile">textile</a>,
<a href="http://www.wikicreole.org/wiki/Home">creole</a>,...), and
I would prefer writing blog posts with <a href="http://daringfireball.net/projects/markdown/">markdown</a>.
In my case blog posts are more notes than the blog posts,
because they are more technical, and there is lots of code snippets!</p>

<h2>Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a> is the very easy framework on top of <a href="https://github.com/mojombo/jekyll">Jekyll</a>, and
Jekyll is a blog-aware, static site generator in <a href="http://ruby-lang.org">Ruby</a>.</p>

<h3>Install</h3>

<p>The official <a href="http://octopress.org/">Octopress</a> install is just to clone or fork the
<a href="https://github.com/imathis/octopress">Octopress repo</a>. I've chose to do fork then
clone it from my forked repo.</p>

<p><code>bash
$ git clone git@github.com:xajler/octopress.git
</code></p>

<blockquote><p><strong>Notes:</strong></p>

<p>You'll need to change the clone to your repository, since there is need for Read+Write access!</p>

<p>I'm lying a bit the first attempt was a clone, but afterwards I've chose to fork it, why?,
you'll need to read about it a little bit later.</p></blockquote>

<h2>Using Octopress with Rake</h2>

<p>The <a href="http://octopress.org/">Octopress</a> uses Jim Weirich's great make-like build utility
<a href="https://github.com/jimweirich/rake">Rake</a>,
for creating posts/pages, deploying, generating,...</p>

<h3>Rake Install</h3>

<p>The <a href="http://octopress.org/">Octopress</a> needs for the first time to generate the sandbox with theme and placeholder
folder for posts. It can be achieved by running (needs to be in forked/cloned directory):</p>

<p>``` bash
$ rake install</p>

<h2>Copying classic theme into ./source and ./sass</h2>

<p>mkdir -p source
cp -r .themes/classic/source/. source
mkdir -p sass
cp -r .themes/classic/sass/. sass
mkdir -p source/_posts
mkdir -p public
```</p>

<p>The command will create <code>source</code> and <code>sass</code> folders. The <code>source/_posts</code> folder is where the markdown
posts will reside.</p>

<p>This is why I forked the <a href="http://octopress.org/">Octopress</a>, so that I can commit the posts as
the markdown files, if I would clone it, I should have the write access to <a href="http://octopress.org/">Octopress</a>,
to commit, this way I have my forked version and still I can always pull changes from
upsteramed original <a href="http://octopress.org/">Octopress</a>, but more of this in separate post.</p>

<h3>Creating first post</h3>

<p>Create post with <code>new_post['post name here']</code>:</p>

<p><code>bash
$ rake new_post['Deploying Octopress to Github Pages and setting custom subdomain CNAME']
mkdir -p source/_posts
Creating new post: source/_posts/2012-10-10-deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname.markdown
</code></p>

<p>By opening it in your favorite editor you'll get:</p>

<h2>``` text 2012-10-10-deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname.markdown</h2>

<p>layout: post
title: "Deploying Octopress to Github Pages and setting custom subdomain CNAME"
date: 2012-10-11 01:01
comments: true</p>

<h2>categories:</h2>

<p>```</p>

<p>Categories can be add in few ways, my way is one-liner:</p>

<pre><code>categories: [octopress, github, github pages]
</code></pre>

<h3>Generating the Site</h3>

<p>Add some content to your first post and then run <code>generate</code> command that generates whole site:</p>

<p>``` bash
$ rake generate</p>

<h2>Generating Site with Jekyll</h2>

<p>directory source/stylesheets/
   create source/stylesheets/screen.css
Configuration from /Users/xajler/src/octopress-orig/_config.yml
Building site: source -> public
Successfully generated site: source -> public
```</p>

<h3>Preview Site</h3>

<p>To locally preview generated Site use:</p>

<p>```bash
$ rake preview
Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
[2012-10-11 01:16:08] INFO  WEBrick 1.3.1
[2012-10-11 01:16:08] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin12.0.0]
[2012-10-11 01:16:08] INFO  WEBrick::HTTPServer#start: pid=62929 port=4000
Configuration from /Users/xajler/src/octopress-orig/_config.yml</p>

<p>...
```</p>

<p>Then in browser navigate to:</p>

<pre><code>http://localhost:4000/
</code></pre>

<p>The beauty of the <code>preview</code> is that <em>Auto-regenerating</em> is enabled by default.
Meaning every save of blog post file will trigger <code>generate</code> command making it as live preview.</p>

<h3>Configuring the Octopress</h3>

<p>The <a href="http://octopress.org/">Octopress</a> configuration is in the root <code>_config.yml</code> file.</p>

<p>There you can change <code>url</code>, <code>title</code>, <code>subtitle</code>, <code>permalink</code>, <code>twitter account</code>, <code>github account</code>,
and set site comments via <a href="http://disqus.com/">disqus</a> by providing <code>disqus_short_name</code>.</p>

<h2>Deployment</h2>

<p><a href="http://octopress.org/">Octopress</a> supports <a href="http://heroku.com">Heroku</a>, rsync and
<a href="http://pages.github.com">Github Pages</a> deployment.
I chose the <a href="http://pages.github.com">Github Pages</a> because
<a href="http://www.github.com">Github</a> provide the CNAME changes, so the site can be on your desired domain.</p>

<h3>Github Pages setup</h3>

<p>There are two ways of having pages on the <a href="http://www.github.com">Github</a>.</p>

<p>The User/Organization pages <code>http://username.github.com</code> and project pages <code>gh-pages</code>.</p>

<p>The my way was the User/Organization pages.</p>

<h4>Setting up the repository on Github</h4>

<p>Create new repository on <a href="http://www.github.com">Github</a> and named it as your User/Organization name plus <code>.github.com</code>
in my case was <code>xajler.github.com</code>.</p>

<h4>Configure Octopress for Github Pages</h4>

<p>To prepare <a href="http://octopress.org/">Octopress</a> for deployment to <a href="http://pages.github.com">Github Pages</a>
run commannd and write <code>Repository url</code> (<code>git@github.com:xajler/xajler.github.com</code>):</p>

<p>``` bash
$ rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
Repository url: git@github.com:xajler/xajler.github.com
rm -rf <em>deploy
mkdir </em>deploy
cd <em>deploy
Initialized empty Git repository in /Users/xajler/src/octopress-orig/</em>deploy/.git/
[master (root-commit) ac273d4] Octopress init
 1 file changed, 1 insertion(+)
 create mode 100644 index.html
cd -</p>

<hr />

<h2>Now you can deploy to http://xajler.github.com with <code>rake deploy</code></h2>

<p>```</p>

<p>This command will change <code>git remote origin</code> from <a href="http://octopress.org/">Octopress</a> forked/cloned url to:</p>

<pre><code>git@github.com:xajler/xajler.github.com
</code></pre>

<p>And also add a <code>_deploy</code> folder, actual root of your <a href="http://pages.github.com">Github Pages</a> repository
(<code>github.com/xajler/xajler.github.com</code>).</p>

<h4>Deployment to Github Pages</h4>

<p>The final <code>rake</code> command is <code>deploy</code>. It will create commit and push to <a href="http://www.github.com">Github</a>
repo and you'll get notification to your mail.</p>

<p>``` bash
$ rake deploy</p>

<h2>Deploying branch to Github Pages</h2>

<p>rm -rf _deploy/index.html</p>

<h2>copying public to _deploy</h2>

<p>cp -r public/. <em>deploy
cd </em>deploy</p>

<h2>Commiting: Site updated at 2012-10-11 00:14:34 UTC</h2>

<p>...
```</p>

<p>After deployment in your mail box will be a notification:</p>

<pre><code>[xajler.github.com] Page build successful

Your page has been built. If this is the first time you've pushed, it may take a few minutes to appear, otherwise your changes should appear immediately.
</code></pre>

<p>And if you navigate to <code>http://xajler.github.com</code> (change xajler to your User/Organization name)
you'll see the post and site online!</p>

<h2>The custom domain via CNAME</h2>

<p>The <code>http://xajler.github.com</code> is not really the URL that you'll want to have for the blog.
<a href="http://www.github.com">Github</a> provides the way to customize the domain name.</p>

<h3>Setting custom domain name</h3>

<p>To setup the custom domain name that will point to your Github pages, there is need to
create the <code>CNAME</code> file in <code>source</code> folder. This <code>CNAME</code> will be copied to <code>_deploy</code> folder
when executing <code>rake deploy</code> and will be used by <a href="http://www.github.com">Github</a> to point to the provided domain.</p>

<p><code>bash
$ vim source/CNAME
</code></p>

<p>I've added my subdomain for my domain <a href="http://metaintellect.com">metaintellect</a>.</p>

<pre><code>blog.metaintellect.com
</code></pre>

<p>Deploy with <code>rake deploy</code> and it should now be pushed and visible in your
<a href="http://www.github.com">Github</a> repo (<code>xajler.github.com</code>).</p>

<h2>Setting DNS for subdomain</h2>

<p>The DNS nameservers for my domain <a href="http://metaintellect.com">metaintellect</a> are declared on
<a href="http://dynadot.com">dynadot</a>.</p>

<p>Here is my configuration to make the <code>blog.metaintellect.com</code> CNAME work with <a href="http://pages.github.com">Github Pages</a>:</p>

<p><img src="https://pbs.twimg.com/media/A44tgDACAAAsDwn.png:large"></p>

<h2>Conclusion</h2>

<p>I hope that I will now blog my notes about so many tehnical IT stuff I do everyday, and
now with markdown and the <a href="http://www.github.com">Github</a> it is fairly easy and fun!</p>
]]></content>
  </entry>
  
</feed>
