<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backup | Learn-a-holic Geek Notes]]></title>
  <link href="http://xajler.github.com/blog/categories/backup/atom.xml" rel="self"/>
  <link href="http://xajler.github.com/"/>
  <updated>2012-10-12T13:31:57+02:00</updated>
  <id>http://xajler.github.com/</id>
  <author>
    <name><![CDATA[Kornelije Sajler]]></name>
    <email><![CDATA[xajler@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backing up PostgreSQL with backup and whatever gems on VPS]]></title>
    <link href="http://xajler.github.com/blog/2012/10/10/backing-up-postgresql-with-backup-and-whatever-gems/"/>
    <updated>2012-10-10T07:12:00+02:00</updated>
    <id>http://xajler.github.com/blog/2012/10/10/backing-up-postgresql-with-backup-and-whatever-gems</id>
    <content type="html"><![CDATA[<h2>Mission</h2>

<p>A few months ago I've created a <a href="https://github.com/xajler/mi-guest">simple Rails app</a> (after 6 years!!!)
that essentially stores guests and keeping track of accommodations for my friend's villa.</p>

<p>After a month in production I've started thinking about backup of the database. Code is on
the <a href="http://github.com">Github</a> so I have only need to worry about database.</p>

<p>My first initial thoughts were on <a href="http://dropbox.com">Dropbox</a>, I've installed the <a href="http://dropbox.com">Dropbox</a> client on my no GUI
Ubuntu Server, but when I ran the <a href="http://dropbox.com">Dropbox</a> the memory usage got doubled and I remove it all together!</p>

<p>Then I started thinking about good old FTP backup, I was sure that I want backup somewhere else
than the VPS where the database is running. I have one  account at <a href="http://arvixe.com">Arvixe</a>, Unlimited Linux hosting
and I've created the FTP user and even found this <a href="https://github.com/meskyanichi/backup">backup gem</a> back then
but I just drop all together until today.</p>

<p>I have VPS at <a href="http://buyvm.net">BuyVM (ex Frantech)</a> and they are offering a free storage
VPS of 5Gb which is more than enough for my backup. I signed for an account and idea came again to use
it as backup...</p>

<p>...and the idea expanded to include every day schedule of backup.</p>

<p>Incidentally, to day I finally get started my <a href="http://octopress.org">Octopress</a> blog
deployed via <a href="http://pages.github.com">Github Pages</a>, so I'm
writting all the steps as notes for futre usage, or if someone can be useful...</p>

<h2>backup Gem</h2>

<p>The <a href="https://github.com/meskyanichi/backup">backup gem</a> is one great gem with a lot of
backup options like databases, storages, compressions, encrypt-ors,...</p>

<h3>Install</h3>

<p>Installation is a straight forward like any Ruby Gem:</p>

<p><code>bash
$ gem install backup
</code></p>

<h3>Backup Model Generator</h3>

<p>backup gem have its own backup "model" generator that creates backup config files, this is a comprehensive usage:</p>

<p>``` bash
Usage:
  backup generate:model --trigger=TRIGGER</p>

<p>Options:
  --trigger=TRIGGER
  [--config-path=CONFIG_PATH]  # Path to your Backup configuration directory
  [--databases=DATABASES]      # (mongodb, mysql, postgresql, redis, riak)
  [--storages=STORAGES]        # (cloudfiles, dropbox, ftp, local, ninefold, rsync, s3, scp, sftp)
  [--syncers=SYNCERS]          # (cloud_files, rsync_local, rsync_pull, rsync_push, s3)
  [--encryptors=ENCRYPTORS]    # (gpg, openssl)
  [--compressors=COMPRESSORS]  # (bzip2, gzip, lzma, pbzip2)
  [--notifiers=NOTIFIERS]      # (campfire, hipchat, mail, presently, prowl, twitter)
  [--archives]
  [--splitter]                 # use <code>--no-splitter</code> to disable</p>

<pre><code>                          # Default: true
</code></pre>

<p>```</p>

<h3>Generate a Backup model file</h3>

<p>Let's create simple config file with backup generator:</p>

<p><code>bash
$ backup generate:model --trigger miguest_backup --databases="postgresql" \
  --storages="ftp" --compressors="bzip2"
</code></p>

<p>This will create a <code>config.rb</code> and <code>models/miguest_backup.rb</code> files in <code>~/Backup</code> folder.</p>

<h3>Refine backup Configuration</h3>

<p>Backup generator will create boilerplate model template needing more refinement. It looks something like this:</p>

<p>``` ruby Boilerplate backup model template - miguest_backup.rb</p>

<h1>encoding: utf-8</h1>

<h1>#</h1>

<h1>Backup Generated: miguest_backup</h1>

<h1>Once configured, you can run the backup with the following command:</h1>

<p>#</p>

<h1>$ backup perform -t miguest_backup [-c <path_to_configuration_file>]</h1>

<p>#
Backup::Model.new(:miguest_backup, 'Description for miguest_backup') do
  ##
  # Split [Splitter]
  #
  # Split the backup file in to chunks of 250 megabytes
  # if the backup file size exceeds 250 megabytes
  #
  split_into_chunks_of 250</p>

<p>  ##
  # PostgreSQL [Database]
  #
  database PostgreSQL do |db|</p>

<pre><code>db.name               = "my_database_name"
db.username           = "my_username"
db.password           = "my_password"
db.host               = "localhost"
db.port               = 5432
# db.socket             = "/tmp/pg.sock"
# db.additional_options = ["-xc", "-E=utf8"]
# Optional: Use to set the location of this utility
#   if it cannot be found by name in your $PATH
# db.pg_dump_utility = "/opt/local/bin/pg_dump"
</code></pre>

<p>  end</p>

<p>  ##
  # FTP (File Transfer Protocol) [Storage]
  #
  store_with FTP do |server|</p>

<pre><code>server.username     = "my_username"
server.password     = "my_password"
server.ip           = "1.2.3.4"
server.port         = 21
server.path         = "~/backups/"
server.keep         = 5
server.passive_mode = false
</code></pre>

<p>  end</p>

<p>  ##
  # Bzip2 [Compressor]
  #
  compress_with Bzip2</p>

<p>end
```</p>

<p>Fairly straight forward refinements are needed, usernames, passwords,... After adding all
the secret stuff, the backup can be run as easy as:</p>

<p><code>bash
$ backup perform --trigger miguest_backup
[2012/10/10 12:21:26][message] Performing Backup for 'Description for miguest_backup (miguest_backup)'!
[2012/10/10 12:21:26][message] [ backup 3.0.25 : ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux] ]
[2012/10/10 12:21:26][message] Database::PostgreSQL started dumping and archiving 'miguest'.
[2012/10/10 12:21:26][message] Using Compressor::Bzip2 for compression.
[2012/10/10 12:21:26][message]   Command: '/bin/bzip2'
[2012/10/10 12:21:26][message]   Ext: '.bz2'
[2012/10/10 12:21:28][message] Database::PostgreSQL Complete!
[2012/10/10 12:21:28][message] Packaging the backup files...
[2012/10/10 12:21:28][message] Splitter configured with a chunk size of 250MB.
[2012/10/10 12:21:28][message] Packaging Complete!
[2012/10/10 12:21:28][message] Cleaning up the temporary files...
[2012/10/10 12:21:29][message] Storage::FTP started transferring '2012.10.10.12.21.26.miguest_backup.tar' to 'ftp.services.buyvm.net'.
[2012/10/10 12:21:29][message] Storage::FTP: Cycling Started...
[2012/10/10 12:21:29][message] Storage::FTP: Cycling Complete!
[2012/10/10 12:21:29][message] Cleaning up the package files...
[2012/10/10 12:21:29][warning] Backup for 'Description for miguest_backup (miguest_backup)' Completed Successfully (with Warnings) in 00:00:03
</code></p>

<p>And after the connecting to the storage server via FTP, there is backup:</p>

<p><img src="https://pbs.twimg.com/media/A44syBuCEAELa98.png:large"></p>

<h3>But there is more to backup gem</h3>

<p>Really, what I'm using for backup is just minimal what backup gem can offer, here is detailed
impressive list of backup features:</p>

<h4>Databases</h4>

<p>MySQL, PostgreSQL, MongoDB, Redis, Riak</p>

<h4>Compression</h4>

<p>bzip2, gzip, lzma, pbzip2</p>

<h4>Storages</h4>

<p>cloudfiles, Dropbox, FTP, local, ninefold, rsync, S3, scp, SFTP</p>

<h4>Notifiers</h4>

<p>campfire, hipchat, mail, presently, prowl, twitter</p>

<h4>Encryption</h4>

<p>GPG, OpenSSL</p>

<h2>Scheduling the backups with whenever Gem</h2>

<p><a href="https://github.com/javan/whenever">Whenever</a> is a Ruby gem that provides a clear syntax for
writing and deploying cron jobs. And this is what I need to schedule the backups to run everyday.</p>

<h3>Install</h3>

<p><code>bash
$ gem install whenever
</code></p>

<h3>Configure (Wheneverize)</h3>

<p>Configure the whenever, but first make sure that we are in backup folder <code>~/Backup</code></p>

<p><code>bash
$ cd ~/Backup
</code></p>

<p>Then create config folder:</p>

<p><code>bash
$ mkdir config
</code></p>

<p>And then run the command:</p>

<p><code>bash
$ wheneverize .
~ [add] writing './config/schedule.rb'
~ [done] wheneverized!
</code></p>

<p>Open the <code>config/schedule.rb</code> file and add the following:</p>

<p><code>ruby whenever schedule config - config/schedule.rb
every 1.day, :at =&gt; '4:30 am' do
  command "backup perform --trigger miguest_backup"
end
</code></p>

<h3>Schedule to crontab</h3>

<p>Run <code>whenever</code> with no arguments see the <code>crontab</code> entry this will create:</p>

<p>``` bash
$ whenever
30 4 * * * /bin/bash -l -c 'backup perform --trigger miguest_backup'</p>

<h2>[message] Above is your schedule file converted to cron syntax; your crontab file was not updated.</h2>

<h2>[message] Run `whenever --help' for more options.</h2>

<p>```</p>

<p>To write (or update) this job in your <code>crontab</code>, use:</p>

<p><code>bash
$ whenever --update-crontab
~ [write] crontab file written
</code></p>

<p>And that's it, so what is included:</p>

<ul>
<li>Backup of postgres database.</li>
<li>Sending compressed backup via FTP.</li>
<li>Scheduled backup every day at 4:30 am.</li>
</ul>


<h2>Update</h2>

<p>The scheduled backups are working and here is the picture as proof!</p>

<p><img src="http://i47.tinypic.com/xndh7r.png"></p>

<p>Note that servers are not in same Time Zone hence offset of two hours. I know that one
is in Chicago, and second is in California or New York, but either way the scheduled backup
works!</p>
]]></content>
  </entry>
  
</feed>
